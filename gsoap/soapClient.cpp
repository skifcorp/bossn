/* soapClient.cpp
   Generated by gSOAP 2.8.14 from webservice.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under ONE of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#if defined(__BORLANDC__)
#pragma option push -w-8060
#pragma option push -w-8004
#endif
#include "soapH.h"

SOAP_SOURCE_STAMP("@(#) soapClient.cpp ver 2.8.14 2013-04-23 07:10:55 GMT")


SOAP_FMAC5 int SOAP_FMAC6 soap_send___ns1__HelloResponse(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__HelloResponse *ns1__HelloResponse)
{	struct __ns1__HelloResponse soap_tmp___ns1__HelloResponse;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost/boss/ws/test.1cws";
	if (soap_action == NULL)
		soap_action = "http://localhost#Test:HelloResponse";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__HelloResponse.ns1__HelloResponse = ns1__HelloResponse;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__HelloResponse(soap, &soap_tmp___ns1__HelloResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__HelloResponse(soap, &soap_tmp___ns1__HelloResponse, "-ns1:HelloResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__HelloResponse(soap, &soap_tmp___ns1__HelloResponse, "-ns1:HelloResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv___ns1__HelloResponse(struct soap *soap, struct __ns1__HelloResponse *_param_1)
{
	soap_default___ns1__HelloResponse(soap, _param_1);
	soap_begin(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get___ns1__HelloResponse(soap, _param_1, "-ns1:HelloResponse", NULL);
	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
		soap->error = SOAP_NO_METHOD;
	if (soap->error
	 || soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__Hello(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__Hello *ns1__Hello, _ns1__HelloResponse *ns1__HelloResponse)
{	struct __ns1__Hello soap_tmp___ns1__Hello;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost/boss/ws/test.1cws";
	if (soap_action == NULL)
		soap_action = "http://localhost#Test:Hello";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__Hello.ns1__Hello = ns1__Hello;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__Hello(soap, &soap_tmp___ns1__Hello);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__Hello(soap, &soap_tmp___ns1__Hello, "-ns1:Hello", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__Hello(soap, &soap_tmp___ns1__Hello, "-ns1:Hello", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__HelloResponse)
		return soap_closesock(soap);
	ns1__HelloResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__HelloResponse->soap_get(soap, "ns1:HelloResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_send___ns1__HelloResponse_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__HelloResponse *ns1__HelloResponse)
{	struct __ns1__HelloResponse_ soap_tmp___ns1__HelloResponse_;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost/boss/ws/test.1cws";
	if (soap_action == NULL)
		soap_action = "http://localhost#Test:HelloResponse";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__HelloResponse_.ns1__HelloResponse = ns1__HelloResponse;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__HelloResponse_(soap, &soap_tmp___ns1__HelloResponse_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__HelloResponse_(soap, &soap_tmp___ns1__HelloResponse_, "-ns1:HelloResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__HelloResponse_(soap, &soap_tmp___ns1__HelloResponse_, "-ns1:HelloResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

SOAP_FMAC5 int SOAP_FMAC6 soap_recv___ns1__HelloResponse_(struct soap *soap, struct __ns1__HelloResponse_ *_param_2)
{
	soap_default___ns1__HelloResponse_(soap, _param_2);
	soap_begin(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get___ns1__HelloResponse_(soap, _param_2, "-ns1:HelloResponse", NULL);
	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
		soap->error = SOAP_NO_METHOD;
	if (soap->error
	 || soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

SOAP_FMAC5 int SOAP_FMAC6 soap_call___ns1__Hello_(struct soap *soap, const char *soap_endpoint, const char *soap_action, _ns1__Hello *ns1__Hello, _ns1__HelloResponse *ns1__HelloResponse)
{	struct __ns1__Hello_ soap_tmp___ns1__Hello_;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost/boss/ws/test.1cws";
	if (soap_action == NULL)
		soap_action = "http://localhost#Test:Hello";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__Hello_.ns1__Hello = ns1__Hello;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__Hello_(soap, &soap_tmp___ns1__Hello_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__Hello_(soap, &soap_tmp___ns1__Hello_, "-ns1:Hello", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__Hello_(soap, &soap_tmp___ns1__Hello_, "-ns1:Hello", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__HelloResponse)
		return soap_closesock(soap);
	ns1__HelloResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__HelloResponse->soap_get(soap, "ns1:HelloResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

#if defined(__BORLANDC__)
#pragma option pop
#pragma option pop
#endif

/* End of soapClient.cpp */
