/* soapbossnSoapBindingProxy.h
   Generated by gSOAP 2.8.14 from webservice.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under ONE of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapbossnSoapBindingProxy_H
#define soapbossnSoapBindingProxy_H
#include "soapH.h"

class SOAP_CMAC bossnSoapBindingProxy
{ public:
	struct soap *soap;
	bool own;
	/// Endpoint URL of service 'bossnSoapBindingProxy' (change as needed)
	const char *soap_endpoint;
	/// Constructor
	bossnSoapBindingProxy();
	/// Constructor to use/share an engine state
	bossnSoapBindingProxy(struct soap*);
	/// Constructor with endpoint URL
	bossnSoapBindingProxy(const char *url);
	/// Constructor with engine input+output mode control
	bossnSoapBindingProxy(soap_mode iomode);
	/// Constructor with URL and input+output mode control
	bossnSoapBindingProxy(const char *url, soap_mode iomode);
	/// Constructor with engine input and output mode control
	bossnSoapBindingProxy(soap_mode imode, soap_mode omode);
	/// Destructor frees deserialized data
	virtual	~bossnSoapBindingProxy();
	/// Initializer used by constructors
	virtual	void bossnSoapBindingProxy_init(soap_mode imode, soap_mode omode);
	/// Delete all deserialized data (uses soap_destroy and soap_end)
	virtual	void destroy();
	/// Delete all deserialized data and reset to default
	virtual	void reset();
	/// Disables and removes SOAP Header from message
	virtual	void soap_noheader();
	/// Get SOAP Header structure (NULL when absent)
	virtual	const SOAP_ENV__Header *soap_header();
	/// Get SOAP Fault structure (NULL when absent)
	virtual	const SOAP_ENV__Fault *soap_fault();
	/// Get SOAP Fault string (NULL when absent)
	virtual	const char *soap_fault_string();
	/// Get SOAP Fault detail as string (NULL when absent)
	virtual	const char *soap_fault_detail();
	/// Close connection (normally automatic, except for send_X ops)
	virtual	int soap_close_socket();
	/// Force close connection (can kill a thread blocked on IO)
	virtual	int soap_force_close_socket();
	/// Print fault
	virtual	void soap_print_fault(FILE*);
#ifndef WITH_LEAN
	/// Print fault to stream
#ifndef WITH_COMPAT
	virtual	void soap_stream_fault(std::ostream&);
#endif

	/// Put fault into buffer
	virtual	char *soap_sprint_fault(char *buf, size_t len);
#endif

	/// Web service one-way send operation 'send_ExchangeResponse' (returns error code or SOAP_OK)
	virtual	int send_ExchangeResponse(_ns1__ExchangeResponse *ns1__ExchangeResponse) { return this->send_ExchangeResponse(NULL, NULL, ns1__ExchangeResponse); }
	virtual	int send_ExchangeResponse(const char *endpoint, const char *soap_action, _ns1__ExchangeResponse *ns1__ExchangeResponse);
	/// Web service one-way receive operation 'recv_ExchangeResponse' (returns error code or SOAP_OK);
	virtual	int recv_ExchangeResponse(struct __ns1__ExchangeResponse&);
	/// Web service receive of HTTP Accept acknowledgment for one-way send operation 'send_ExchangeResponse' (returns error code or SOAP_OK)
	virtual	int recv_ExchangeResponse_empty_response() { return soap_recv_empty_response(this->soap); }
	/// Web service one-way synchronous send operation 'ExchangeResponse' with HTTP Accept/OK response receive (returns error code or SOAP_OK)
	virtual	int ExchangeResponse(_ns1__ExchangeResponse *ns1__ExchangeResponse) { return this->ExchangeResponse(NULL, NULL, ns1__ExchangeResponse); }
	virtual	int ExchangeResponse(const char *endpoint, const char *soap_action, _ns1__ExchangeResponse *ns1__ExchangeResponse) { if (this->send_ExchangeResponse(endpoint, soap_action, ns1__ExchangeResponse) || soap_recv_empty_response(this->soap)) return this->soap->error; return SOAP_OK; }

	/// Web service operation 'Exchange' (returns error code or SOAP_OK)
	virtual	int Exchange(_ns1__Exchange *ns1__Exchange, _ns1__ExchangeResponse *ns1__ExchangeResponse) { return this->Exchange(NULL, NULL, ns1__Exchange, ns1__ExchangeResponse); }
	virtual	int Exchange(const char *endpoint, const char *soap_action, _ns1__Exchange *ns1__Exchange, _ns1__ExchangeResponse *ns1__ExchangeResponse);

	/// Web service one-way send operation 'send_AcceptResponse' (returns error code or SOAP_OK)
	virtual	int send_AcceptResponse(_ns1__AcceptResponse *ns1__AcceptResponse) { return this->send_AcceptResponse(NULL, NULL, ns1__AcceptResponse); }
	virtual	int send_AcceptResponse(const char *endpoint, const char *soap_action, _ns1__AcceptResponse *ns1__AcceptResponse);
	/// Web service one-way receive operation 'recv_AcceptResponse' (returns error code or SOAP_OK);
	virtual	int recv_AcceptResponse(struct __ns1__AcceptResponse&);
	/// Web service receive of HTTP Accept acknowledgment for one-way send operation 'send_AcceptResponse' (returns error code or SOAP_OK)
	virtual	int recv_AcceptResponse_empty_response() { return soap_recv_empty_response(this->soap); }
	/// Web service one-way synchronous send operation 'AcceptResponse' with HTTP Accept/OK response receive (returns error code or SOAP_OK)
	virtual	int AcceptResponse(_ns1__AcceptResponse *ns1__AcceptResponse) { return this->AcceptResponse(NULL, NULL, ns1__AcceptResponse); }
	virtual	int AcceptResponse(const char *endpoint, const char *soap_action, _ns1__AcceptResponse *ns1__AcceptResponse) { if (this->send_AcceptResponse(endpoint, soap_action, ns1__AcceptResponse) || soap_recv_empty_response(this->soap)) return this->soap->error; return SOAP_OK; }

	/// Web service operation 'Accept' (returns error code or SOAP_OK)
	virtual	int Accept(_ns1__Accept *ns1__Accept, _ns1__AcceptResponse *ns1__AcceptResponse) { return this->Accept(NULL, NULL, ns1__Accept, ns1__AcceptResponse); }
	virtual	int Accept(const char *endpoint, const char *soap_action, _ns1__Accept *ns1__Accept, _ns1__AcceptResponse *ns1__AcceptResponse);

	/// Web service one-way send operation 'send_ExchangeResponse' (returns error code or SOAP_OK)
	virtual	int send_ExchangeResponse_(_ns1__ExchangeResponse *ns1__ExchangeResponse) { return this->send_ExchangeResponse_(NULL, NULL, ns1__ExchangeResponse); }
	virtual	int send_ExchangeResponse_(const char *endpoint, const char *soap_action, _ns1__ExchangeResponse *ns1__ExchangeResponse);
	/// Web service one-way receive operation 'recv_ExchangeResponse' (returns error code or SOAP_OK);
	virtual	int recv_ExchangeResponse_(struct __ns1__ExchangeResponse_&);
	/// Web service receive of HTTP Accept acknowledgment for one-way send operation 'send_ExchangeResponse' (returns error code or SOAP_OK)
	virtual	int recv_ExchangeResponse__empty_response() { return soap_recv_empty_response(this->soap); }
	/// Web service one-way synchronous send operation 'ExchangeResponse' with HTTP Accept/OK response receive (returns error code or SOAP_OK)
	virtual	int ExchangeResponse_(_ns1__ExchangeResponse *ns1__ExchangeResponse) { return this->ExchangeResponse_(NULL, NULL, ns1__ExchangeResponse); }
	virtual	int ExchangeResponse_(const char *endpoint, const char *soap_action, _ns1__ExchangeResponse *ns1__ExchangeResponse) { if (this->send_ExchangeResponse_(endpoint, soap_action, ns1__ExchangeResponse) || soap_recv_empty_response(this->soap)) return this->soap->error; return SOAP_OK; }

	/// Web service operation 'Exchange' (returns error code or SOAP_OK)
	virtual	int Exchange_(_ns1__Exchange *ns1__Exchange, _ns1__ExchangeResponse *ns1__ExchangeResponse) { return this->Exchange_(NULL, NULL, ns1__Exchange, ns1__ExchangeResponse); }
	virtual	int Exchange_(const char *endpoint, const char *soap_action, _ns1__Exchange *ns1__Exchange, _ns1__ExchangeResponse *ns1__ExchangeResponse);

	/// Web service one-way send operation 'send_AcceptResponse' (returns error code or SOAP_OK)
	virtual	int send_AcceptResponse_(_ns1__AcceptResponse *ns1__AcceptResponse) { return this->send_AcceptResponse_(NULL, NULL, ns1__AcceptResponse); }
	virtual	int send_AcceptResponse_(const char *endpoint, const char *soap_action, _ns1__AcceptResponse *ns1__AcceptResponse);
	/// Web service one-way receive operation 'recv_AcceptResponse' (returns error code or SOAP_OK);
	virtual	int recv_AcceptResponse_(struct __ns1__AcceptResponse_&);
	/// Web service receive of HTTP Accept acknowledgment for one-way send operation 'send_AcceptResponse' (returns error code or SOAP_OK)
	virtual	int recv_AcceptResponse__empty_response() { return soap_recv_empty_response(this->soap); }
	/// Web service one-way synchronous send operation 'AcceptResponse' with HTTP Accept/OK response receive (returns error code or SOAP_OK)
	virtual	int AcceptResponse_(_ns1__AcceptResponse *ns1__AcceptResponse) { return this->AcceptResponse_(NULL, NULL, ns1__AcceptResponse); }
	virtual	int AcceptResponse_(const char *endpoint, const char *soap_action, _ns1__AcceptResponse *ns1__AcceptResponse) { if (this->send_AcceptResponse_(endpoint, soap_action, ns1__AcceptResponse) || soap_recv_empty_response(this->soap)) return this->soap->error; return SOAP_OK; }

	/// Web service operation 'Accept' (returns error code or SOAP_OK)
	virtual	int Accept_(_ns1__Accept *ns1__Accept, _ns1__AcceptResponse *ns1__AcceptResponse) { return this->Accept_(NULL, NULL, ns1__Accept, ns1__AcceptResponse); }
	virtual	int Accept_(const char *endpoint, const char *soap_action, _ns1__Accept *ns1__Accept, _ns1__AcceptResponse *ns1__AcceptResponse);
};
#endif
