/* soapbossnSoapBindingProxy.h
   Generated by gSOAP 2.8.14 from webservice.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under ONE of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#ifndef soapbossnSoapBindingProxy_H
#define soapbossnSoapBindingProxy_H
#include "soapH.h"

class SOAP_CMAC bossnSoapBindingProxy
{ public:
	struct soap *soap;
	bool own;
	/// Endpoint URL of service 'bossnSoapBindingProxy' (change as needed)
	const char *soap_endpoint;
	/// Constructor
	bossnSoapBindingProxy();
	/// Constructor to use/share an engine state
	bossnSoapBindingProxy(struct soap*);
	/// Constructor with endpoint URL
	bossnSoapBindingProxy(const char *url);
	/// Constructor with engine input+output mode control
	bossnSoapBindingProxy(soap_mode iomode);
	/// Constructor with URL and input+output mode control
	bossnSoapBindingProxy(const char *url, soap_mode iomode);
	/// Constructor with engine input and output mode control
	bossnSoapBindingProxy(soap_mode imode, soap_mode omode);
	/// Destructor frees deserialized data
	virtual	~bossnSoapBindingProxy();
	/// Initializer used by constructors
	virtual	void bossnSoapBindingProxy_init(soap_mode imode, soap_mode omode);
	/// Delete all deserialized data (uses soap_destroy and soap_end)
	virtual	void destroy();
	/// Delete all deserialized data and reset to default
	virtual	void reset();
	/// Disables and removes SOAP Header from message
	virtual	void soap_noheader();
	/// Get SOAP Header structure (NULL when absent)
	virtual	const SOAP_ENV__Header *soap_header();
	/// Get SOAP Fault structure (NULL when absent)
	virtual	const SOAP_ENV__Fault *soap_fault();
	/// Get SOAP Fault string (NULL when absent)
	virtual	const char *soap_fault_string();
	/// Get SOAP Fault detail as string (NULL when absent)
	virtual	const char *soap_fault_detail();
	/// Close connection (normally automatic, except for send_X ops)
	virtual	int soap_close_socket();
	/// Force close connection (can kill a thread blocked on IO)
	virtual	int soap_force_close_socket();
	/// Print fault
	virtual	void soap_print_fault(FILE*);
#ifndef WITH_LEAN
	/// Print fault to stream
#ifndef WITH_COMPAT
	virtual	void soap_stream_fault(std::ostream&);
#endif

	/// Put fault into buffer
	virtual	char *soap_sprint_fault(char *buf, size_t len);
#endif

	/// Web service one-way send operation 'send_exchangeResponse' (returns error code or SOAP_OK)
	virtual	int send_exchangeResponse(_ns1__exchangeResponse *ns1__exchangeResponse) { return this->send_exchangeResponse(NULL, NULL, ns1__exchangeResponse); }
	virtual	int send_exchangeResponse(const char *endpoint, const char *soap_action, _ns1__exchangeResponse *ns1__exchangeResponse);
	/// Web service one-way receive operation 'recv_exchangeResponse' (returns error code or SOAP_OK);
	virtual	int recv_exchangeResponse(struct __ns1__exchangeResponse&);
	/// Web service receive of HTTP Accept acknowledgment for one-way send operation 'send_exchangeResponse' (returns error code or SOAP_OK)
	virtual	int recv_exchangeResponse_empty_response() { return soap_recv_empty_response(this->soap); }
	/// Web service one-way synchronous send operation 'exchangeResponse' with HTTP Accept/OK response receive (returns error code or SOAP_OK)
	virtual	int exchangeResponse(_ns1__exchangeResponse *ns1__exchangeResponse) { return this->exchangeResponse(NULL, NULL, ns1__exchangeResponse); }
	virtual	int exchangeResponse(const char *endpoint, const char *soap_action, _ns1__exchangeResponse *ns1__exchangeResponse) { if (this->send_exchangeResponse(endpoint, soap_action, ns1__exchangeResponse) || soap_recv_empty_response(this->soap)) return this->soap->error; return SOAP_OK; }

	/// Web service operation 'exchange' (returns error code or SOAP_OK)
	virtual	int exchange(_ns1__exchange *ns1__exchange, _ns1__exchangeResponse *ns1__exchangeResponse) { return this->exchange(NULL, NULL, ns1__exchange, ns1__exchangeResponse); }
	virtual	int exchange(const char *endpoint, const char *soap_action, _ns1__exchange *ns1__exchange, _ns1__exchangeResponse *ns1__exchangeResponse);

	/// Web service one-way send operation 'send_acceptResponse' (returns error code or SOAP_OK)
	virtual	int send_acceptResponse(_ns1__acceptResponse *ns1__acceptResponse) { return this->send_acceptResponse(NULL, NULL, ns1__acceptResponse); }
	virtual	int send_acceptResponse(const char *endpoint, const char *soap_action, _ns1__acceptResponse *ns1__acceptResponse);
	/// Web service one-way receive operation 'recv_acceptResponse' (returns error code or SOAP_OK);
	virtual	int recv_acceptResponse(struct __ns1__acceptResponse&);
	/// Web service receive of HTTP Accept acknowledgment for one-way send operation 'send_acceptResponse' (returns error code or SOAP_OK)
	virtual	int recv_acceptResponse_empty_response() { return soap_recv_empty_response(this->soap); }
	/// Web service one-way synchronous send operation 'acceptResponse' with HTTP Accept/OK response receive (returns error code or SOAP_OK)
	virtual	int acceptResponse(_ns1__acceptResponse *ns1__acceptResponse) { return this->acceptResponse(NULL, NULL, ns1__acceptResponse); }
	virtual	int acceptResponse(const char *endpoint, const char *soap_action, _ns1__acceptResponse *ns1__acceptResponse) { if (this->send_acceptResponse(endpoint, soap_action, ns1__acceptResponse) || soap_recv_empty_response(this->soap)) return this->soap->error; return SOAP_OK; }

	/// Web service operation 'accept' (returns error code or SOAP_OK)
	virtual	int accept(_ns1__accept *ns1__accept, _ns1__acceptResponse *ns1__acceptResponse) { return this->accept(NULL, NULL, ns1__accept, ns1__acceptResponse); }
	virtual	int accept(const char *endpoint, const char *soap_action, _ns1__accept *ns1__accept, _ns1__acceptResponse *ns1__acceptResponse);

	/// Web service one-way send operation 'send_exchangeResponse' (returns error code or SOAP_OK)
	virtual	int send_exchangeResponse_(_ns1__exchangeResponse *ns1__exchangeResponse) { return this->send_exchangeResponse_(NULL, NULL, ns1__exchangeResponse); }
	virtual	int send_exchangeResponse_(const char *endpoint, const char *soap_action, _ns1__exchangeResponse *ns1__exchangeResponse);
	/// Web service one-way receive operation 'recv_exchangeResponse' (returns error code or SOAP_OK);
	virtual	int recv_exchangeResponse_(struct __ns1__exchangeResponse_&);
	/// Web service receive of HTTP Accept acknowledgment for one-way send operation 'send_exchangeResponse' (returns error code or SOAP_OK)
	virtual	int recv_exchangeResponse__empty_response() { return soap_recv_empty_response(this->soap); }
	/// Web service one-way synchronous send operation 'exchangeResponse' with HTTP Accept/OK response receive (returns error code or SOAP_OK)
	virtual	int exchangeResponse_(_ns1__exchangeResponse *ns1__exchangeResponse) { return this->exchangeResponse_(NULL, NULL, ns1__exchangeResponse); }
	virtual	int exchangeResponse_(const char *endpoint, const char *soap_action, _ns1__exchangeResponse *ns1__exchangeResponse) { if (this->send_exchangeResponse_(endpoint, soap_action, ns1__exchangeResponse) || soap_recv_empty_response(this->soap)) return this->soap->error; return SOAP_OK; }

	/// Web service operation 'exchange' (returns error code or SOAP_OK)
	virtual	int exchange_(_ns1__exchange *ns1__exchange, _ns1__exchangeResponse *ns1__exchangeResponse) { return this->exchange_(NULL, NULL, ns1__exchange, ns1__exchangeResponse); }
	virtual	int exchange_(const char *endpoint, const char *soap_action, _ns1__exchange *ns1__exchange, _ns1__exchangeResponse *ns1__exchangeResponse);

	/// Web service one-way send operation 'send_acceptResponse' (returns error code or SOAP_OK)
	virtual	int send_acceptResponse_(_ns1__acceptResponse *ns1__acceptResponse) { return this->send_acceptResponse_(NULL, NULL, ns1__acceptResponse); }
	virtual	int send_acceptResponse_(const char *endpoint, const char *soap_action, _ns1__acceptResponse *ns1__acceptResponse);
	/// Web service one-way receive operation 'recv_acceptResponse' (returns error code or SOAP_OK);
	virtual	int recv_acceptResponse_(struct __ns1__acceptResponse_&);
	/// Web service receive of HTTP Accept acknowledgment for one-way send operation 'send_acceptResponse' (returns error code or SOAP_OK)
	virtual	int recv_acceptResponse__empty_response() { return soap_recv_empty_response(this->soap); }
	/// Web service one-way synchronous send operation 'acceptResponse' with HTTP Accept/OK response receive (returns error code or SOAP_OK)
	virtual	int acceptResponse_(_ns1__acceptResponse *ns1__acceptResponse) { return this->acceptResponse_(NULL, NULL, ns1__acceptResponse); }
	virtual	int acceptResponse_(const char *endpoint, const char *soap_action, _ns1__acceptResponse *ns1__acceptResponse) { if (this->send_acceptResponse_(endpoint, soap_action, ns1__acceptResponse) || soap_recv_empty_response(this->soap)) return this->soap->error; return SOAP_OK; }

	/// Web service operation 'accept' (returns error code or SOAP_OK)
	virtual	int accept_(_ns1__accept *ns1__accept, _ns1__acceptResponse *ns1__acceptResponse) { return this->accept_(NULL, NULL, ns1__accept, ns1__acceptResponse); }
	virtual	int accept_(const char *endpoint, const char *soap_action, _ns1__accept *ns1__accept, _ns1__acceptResponse *ns1__acceptResponse);
};
#endif
