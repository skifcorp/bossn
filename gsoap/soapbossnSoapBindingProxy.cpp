/* soapbossnSoapBindingProxy.cpp
   Generated by gSOAP 2.8.14 from webservice.h

Copyright(C) 2000-2013, Robert van Engelen, Genivia Inc. All Rights Reserved.
The generated code is released under ONE of the following licenses:
GPL or Genivia's license for commercial use.
This program is released under the GPL with the additional exemption that
compiling, linking, and/or using OpenSSL is allowed.
*/

#include "soapbossnSoapBindingProxy.h"

bossnSoapBindingProxy::bossnSoapBindingProxy()
{	this->soap = soap_new();
	this->own = true;
	bossnSoapBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

bossnSoapBindingProxy::bossnSoapBindingProxy(struct soap *_soap)
{	this->soap = _soap;
	this->own = false;
	bossnSoapBindingProxy_init(_soap->imode, _soap->omode);
}

bossnSoapBindingProxy::bossnSoapBindingProxy(const char *url)
{	this->soap = soap_new();
	this->own = true;
	bossnSoapBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
	soap_endpoint = url;
}

bossnSoapBindingProxy::bossnSoapBindingProxy(soap_mode iomode)
{	this->soap = soap_new();
	this->own = true;
	bossnSoapBindingProxy_init(iomode, iomode);
}

bossnSoapBindingProxy::bossnSoapBindingProxy(const char *url, soap_mode iomode)
{	this->soap = soap_new();
	this->own = true;
	bossnSoapBindingProxy_init(iomode, iomode);
	soap_endpoint = url;
}

bossnSoapBindingProxy::bossnSoapBindingProxy(soap_mode imode, soap_mode omode)
{	this->soap = soap_new();
	this->own = true;
	bossnSoapBindingProxy_init(imode, omode);
}

bossnSoapBindingProxy::~bossnSoapBindingProxy()
{	if (this->own)
		soap_free(this->soap);
}

void bossnSoapBindingProxy::bossnSoapBindingProxy_init(soap_mode imode, soap_mode omode)
{	soap_imode(this->soap, imode);
	soap_omode(this->soap, omode);
	soap_endpoint = NULL;
	static const struct Namespace namespaces[] =
{
	{"SOAP-ENV", "http://www.w3.org/2003/05/soap-envelope", "http://schemas.xmlsoap.org/soap/envelope/", NULL},
	{"SOAP-ENC", "http://www.w3.org/2003/05/soap-encoding", "http://schemas.xmlsoap.org/soap/encoding/", NULL},
	{"xsi", "http://www.w3.org/2001/XMLSchema-instance", "http://www.w3.org/*/XMLSchema-instance", NULL},
	{"xsd", "http://www.w3.org/2001/XMLSchema", "http://www.w3.org/*/XMLSchema", NULL},
	{"ns1", "http://localhost", NULL, NULL},
	{NULL, NULL, NULL, NULL}
};
	soap_set_namespaces(this->soap, namespaces);
}

void bossnSoapBindingProxy::destroy()
{	soap_destroy(this->soap);
	soap_end(this->soap);
}

void bossnSoapBindingProxy::reset()
{	destroy();
	soap_done(this->soap);
	soap_init(this->soap);
	bossnSoapBindingProxy_init(SOAP_IO_DEFAULT, SOAP_IO_DEFAULT);
}

void bossnSoapBindingProxy::soap_noheader()
{	this->soap->header = NULL;
}

const SOAP_ENV__Header *bossnSoapBindingProxy::soap_header()
{	return this->soap->header;
}

const SOAP_ENV__Fault *bossnSoapBindingProxy::soap_fault()
{	return this->soap->fault;
}

const char *bossnSoapBindingProxy::soap_fault_string()
{	return *soap_faultstring(this->soap);
}

const char *bossnSoapBindingProxy::soap_fault_detail()
{	return *soap_faultdetail(this->soap);
}

int bossnSoapBindingProxy::soap_close_socket()
{	return soap_closesock(this->soap);
}

int bossnSoapBindingProxy::soap_force_close_socket()
{	return soap_force_closesock(this->soap);
}

void bossnSoapBindingProxy::soap_print_fault(FILE *fd)
{	::soap_print_fault(this->soap, fd);
}

#ifndef WITH_LEAN
#ifndef WITH_COMPAT
void bossnSoapBindingProxy::soap_stream_fault(std::ostream& os)
{	::soap_stream_fault(this->soap, os);
}
#endif

char *bossnSoapBindingProxy::soap_sprint_fault(char *buf, size_t len)
{	return ::soap_sprint_fault(this->soap, buf, len);
}
#endif

int bossnSoapBindingProxy::send_exchangeResponse(const char *endpoint, const char *soap_action, _ns1__exchangeResponse *ns1__exchangeResponse)
{	struct soap *soap = this->soap;
	struct __ns1__exchangeResponse soap_tmp___ns1__exchangeResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost/bossn/ws/bossn.1cws";
	if (soap_action == NULL)
		soap_action = "http://localhost#bossn:exchangeResponse";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__exchangeResponse.ns1__exchangeResponse = ns1__exchangeResponse;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__exchangeResponse(soap, &soap_tmp___ns1__exchangeResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__exchangeResponse(soap, &soap_tmp___ns1__exchangeResponse, "-ns1:exchangeResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__exchangeResponse(soap, &soap_tmp___ns1__exchangeResponse, "-ns1:exchangeResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int bossnSoapBindingProxy::recv_exchangeResponse(struct __ns1__exchangeResponse& tmp)
{	struct soap *soap = this->soap;

	struct __ns1__exchangeResponse *_param_1 = &tmp;
	soap_default___ns1__exchangeResponse(soap, _param_1);
	soap_begin(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get___ns1__exchangeResponse(soap, _param_1, "-ns1:exchangeResponse", NULL);
	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
		soap->error = SOAP_NO_METHOD;
	if (soap->error
	 || soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int bossnSoapBindingProxy::exchange(const char *endpoint, const char *soap_action, _ns1__exchange *ns1__exchange, _ns1__exchangeResponse *ns1__exchangeResponse)
{	struct soap *soap = this->soap;
	struct __ns1__exchange soap_tmp___ns1__exchange;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost/bossn/ws/bossn.1cws";
	if (soap_action == NULL)
		soap_action = "http://localhost#bossn:exchange";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__exchange.ns1__exchange = ns1__exchange;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__exchange(soap, &soap_tmp___ns1__exchange);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__exchange(soap, &soap_tmp___ns1__exchange, "-ns1:exchange", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__exchange(soap, &soap_tmp___ns1__exchange, "-ns1:exchange", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__exchangeResponse)
		return soap_closesock(soap);
	ns1__exchangeResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__exchangeResponse->soap_get(soap, "ns1:exchangeResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int bossnSoapBindingProxy::send_acceptResponse(const char *endpoint, const char *soap_action, _ns1__acceptResponse *ns1__acceptResponse)
{	struct soap *soap = this->soap;
	struct __ns1__acceptResponse soap_tmp___ns1__acceptResponse;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost/bossn/ws/bossn.1cws";
	if (soap_action == NULL)
		soap_action = "http://localhost#bossn:acceptResponse";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__acceptResponse.ns1__acceptResponse = ns1__acceptResponse;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__acceptResponse(soap, &soap_tmp___ns1__acceptResponse);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__acceptResponse(soap, &soap_tmp___ns1__acceptResponse, "-ns1:acceptResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__acceptResponse(soap, &soap_tmp___ns1__acceptResponse, "-ns1:acceptResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int bossnSoapBindingProxy::recv_acceptResponse(struct __ns1__acceptResponse& tmp)
{	struct soap *soap = this->soap;

	struct __ns1__acceptResponse *_param_2 = &tmp;
	soap_default___ns1__acceptResponse(soap, _param_2);
	soap_begin(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get___ns1__acceptResponse(soap, _param_2, "-ns1:acceptResponse", NULL);
	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
		soap->error = SOAP_NO_METHOD;
	if (soap->error
	 || soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int bossnSoapBindingProxy::accept(const char *endpoint, const char *soap_action, _ns1__accept *ns1__accept, _ns1__acceptResponse *ns1__acceptResponse)
{	struct soap *soap = this->soap;
	struct __ns1__accept soap_tmp___ns1__accept;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost/bossn/ws/bossn.1cws";
	if (soap_action == NULL)
		soap_action = "http://localhost#bossn:accept";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__accept.ns1__accept = ns1__accept;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__accept(soap, &soap_tmp___ns1__accept);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__accept(soap, &soap_tmp___ns1__accept, "-ns1:accept", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__accept(soap, &soap_tmp___ns1__accept, "-ns1:accept", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__acceptResponse)
		return soap_closesock(soap);
	ns1__acceptResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__acceptResponse->soap_get(soap, "ns1:acceptResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int bossnSoapBindingProxy::send_exchangeResponse_(const char *endpoint, const char *soap_action, _ns1__exchangeResponse *ns1__exchangeResponse)
{	struct soap *soap = this->soap;
	struct __ns1__exchangeResponse_ soap_tmp___ns1__exchangeResponse_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost/bossn/ws/bossn.1cws";
	if (soap_action == NULL)
		soap_action = "http://localhost#bossn:exchangeResponse";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__exchangeResponse_.ns1__exchangeResponse = ns1__exchangeResponse;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__exchangeResponse_(soap, &soap_tmp___ns1__exchangeResponse_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__exchangeResponse_(soap, &soap_tmp___ns1__exchangeResponse_, "-ns1:exchangeResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__exchangeResponse_(soap, &soap_tmp___ns1__exchangeResponse_, "-ns1:exchangeResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int bossnSoapBindingProxy::recv_exchangeResponse_(struct __ns1__exchangeResponse_& tmp)
{	struct soap *soap = this->soap;

	struct __ns1__exchangeResponse_ *_param_3 = &tmp;
	soap_default___ns1__exchangeResponse_(soap, _param_3);
	soap_begin(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get___ns1__exchangeResponse_(soap, _param_3, "-ns1:exchangeResponse", NULL);
	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
		soap->error = SOAP_NO_METHOD;
	if (soap->error
	 || soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int bossnSoapBindingProxy::exchange_(const char *endpoint, const char *soap_action, _ns1__exchange *ns1__exchange, _ns1__exchangeResponse *ns1__exchangeResponse)
{	struct soap *soap = this->soap;
	struct __ns1__exchange_ soap_tmp___ns1__exchange_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost/bossn/ws/bossn.1cws";
	if (soap_action == NULL)
		soap_action = "http://localhost#bossn:exchange";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__exchange_.ns1__exchange = ns1__exchange;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__exchange_(soap, &soap_tmp___ns1__exchange_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__exchange_(soap, &soap_tmp___ns1__exchange_, "-ns1:exchange", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__exchange_(soap, &soap_tmp___ns1__exchange_, "-ns1:exchange", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__exchangeResponse)
		return soap_closesock(soap);
	ns1__exchangeResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__exchangeResponse->soap_get(soap, "ns1:exchangeResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int bossnSoapBindingProxy::send_acceptResponse_(const char *endpoint, const char *soap_action, _ns1__acceptResponse *ns1__acceptResponse)
{	struct soap *soap = this->soap;
	struct __ns1__acceptResponse_ soap_tmp___ns1__acceptResponse_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost/bossn/ws/bossn.1cws";
	if (soap_action == NULL)
		soap_action = "http://localhost#bossn:acceptResponse";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__acceptResponse_.ns1__acceptResponse = ns1__acceptResponse;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__acceptResponse_(soap, &soap_tmp___ns1__acceptResponse_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__acceptResponse_(soap, &soap_tmp___ns1__acceptResponse_, "-ns1:acceptResponse", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__acceptResponse_(soap, &soap_tmp___ns1__acceptResponse_, "-ns1:acceptResponse", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	return SOAP_OK;
}

int bossnSoapBindingProxy::recv_acceptResponse_(struct __ns1__acceptResponse_& tmp)
{	struct soap *soap = this->soap;

	struct __ns1__acceptResponse_ *_param_4 = &tmp;
	soap_default___ns1__acceptResponse_(soap, _param_4);
	soap_begin(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	soap_get___ns1__acceptResponse_(soap, _param_4, "-ns1:acceptResponse", NULL);
	if (soap->error == SOAP_TAG_MISMATCH && soap->level == 2)
		soap->error = SOAP_NO_METHOD;
	if (soap->error
	 || soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}

int bossnSoapBindingProxy::accept_(const char *endpoint, const char *soap_action, _ns1__accept *ns1__accept, _ns1__acceptResponse *ns1__acceptResponse)
{	struct soap *soap = this->soap;
	struct __ns1__accept_ soap_tmp___ns1__accept_;
	if (endpoint)
		soap_endpoint = endpoint;
	if (soap_endpoint == NULL)
		soap_endpoint = "http://localhost/bossn/ws/bossn.1cws";
	if (soap_action == NULL)
		soap_action = "http://localhost#bossn:accept";
	soap->encodingStyle = NULL;
	soap_tmp___ns1__accept_.ns1__accept = ns1__accept;
	soap_begin(soap);
	soap_serializeheader(soap);
	soap_serialize___ns1__accept_(soap, &soap_tmp___ns1__accept_);
	if (soap_begin_count(soap))
		return soap->error;
	if (soap->mode & SOAP_IO_LENGTH)
	{	if (soap_envelope_begin_out(soap)
		 || soap_putheader(soap)
		 || soap_body_begin_out(soap)
		 || soap_put___ns1__accept_(soap, &soap_tmp___ns1__accept_, "-ns1:accept", NULL)
		 || soap_body_end_out(soap)
		 || soap_envelope_end_out(soap))
			 return soap->error;
	}
	if (soap_end_count(soap))
		return soap->error;
	if (soap_connect(soap, soap_endpoint, soap_action)
	 || soap_envelope_begin_out(soap)
	 || soap_putheader(soap)
	 || soap_body_begin_out(soap)
	 || soap_put___ns1__accept_(soap, &soap_tmp___ns1__accept_, "-ns1:accept", NULL)
	 || soap_body_end_out(soap)
	 || soap_envelope_end_out(soap)
	 || soap_end_send(soap))
		return soap_closesock(soap);
	if (!ns1__acceptResponse)
		return soap_closesock(soap);
	ns1__acceptResponse->soap_default(soap);
	if (soap_begin_recv(soap)
	 || soap_envelope_begin_in(soap)
	 || soap_recv_header(soap)
	 || soap_body_begin_in(soap))
		return soap_closesock(soap);
	ns1__acceptResponse->soap_get(soap, "ns1:acceptResponse", "");
	if (soap->error)
		return soap_recv_fault(soap, 0);
	if (soap_body_end_in(soap)
	 || soap_envelope_end_in(soap)
	 || soap_end_recv(soap))
		return soap_closesock(soap);
	return soap_closesock(soap);
}
/* End of client proxy code */
